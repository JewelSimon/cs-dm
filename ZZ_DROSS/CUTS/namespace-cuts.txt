-- NAMESPACES

/-
If we just jump in and try to define our own version of the type
called bool, our version would conflict with the one that is already 
provided (as we've just seen) by Lean. To see the problem, uncomment
the following code and see the resulting error, stating that the 
current "environment" (associating meanings with identifiers)
already has an assigned meaning for the identifier, bool.
-/

/-
inductive bool : Type 
| tt : bool
| ff : bool
-/


/-
To avoid such conflicts, we will give our own definition to the
identifier, "bool", in a separate "namespace." We'll call it cs2102.
-/


So the name, bool, is really now cs2102.bool. 

/-
Before we proceed to define functional programs that implement
these operations, we take a short diversion to deep our understanding
of namespaces. We now have two different definitions of bool, and of
the constructors tt and ff: one that we've given, and one that comes
native to Lean. So let's dig in. 
-/

-- MORE ON NAMESPACES

/-
A type definition establishes a new definition for the name of the
type, here bool. It also implicitly defines its own namespace, nested 
within the prevailing namespace, within which the constructor names
are defined. In the current environment, the name bool is thus really 
cs2102.bool, and the names of our constructors, tt and ff, are really
cs2102.bool.tt and cs2102.bool.ff. Like many programming languages,
Lean provides defaults that often let us leave off the "qualifiers,"
with Lean figuring out what we mean by context. 
-/

-- EXPRESSIONS, TYPES, AND LITERAL EXPRESSIONS, IN PARTICULAR

/-
The #check command in Lean can be used to determine the type of an
identifier, value, or expression. An expressions in the form of a
simple name name that has been defined to have some value is called
a "literal" expression.

Hover your mouse over the #check command to check the type of the
literal expression, bool. Lean will tell you that the type of bool 
is Type. Yep, a type, such as bool, is itself a value, and so has 
a type! And its type -- the type of any such type -- is Type! 

Moreover, as the following command shows, the name, "bool", refers, 
in the current contexts, to our local definition of bool, which we 
can write out in full as cs2102.bool. The name does not refer, in
the current environment, to the built-in definition of bool in the 
so-called _root_ namespace.
-/

#check bool
#check _root_.bool

/-
Hover your mouse over "bool." Lean will confirm what we just said.
Similarly, hover over _root_.bool. Notice that it's not the version
of bool defined in our cs2102 namespace. Rather, it's the version 
defined in the _root_ namespace, which is established when Lean is
started.
-/

/-
Similarly, you can confirm that the type of the literal expression,
and thus the type of the value, bool.tt, is bool (think about that!). 
You can also re-confirm here that the definition of bool in use in 
this context is cs2102.bool.
-/
#check xbool.tt

-- NESTED NAMESPACES ESTABLISHED BY INDUCTIVE TYPE DEFINITIONS

/-
The next important concept related to namespaces is that each
inductive type definition introduces its own namespace, with the
same name as the type name, within which its constructor names
are defined. Importantly, such namespaces are not "open" by
default. What that means is that you can't refer to constructors
by name without the type name as a qualifier. Here's a silly type
definition to make the point.
-/

inductive silly_type : Type 
| silly_a : silly_type
| silly_b : silly_type

/-
The name, silly_type, is now defined in the current environment.
-/

#check silly_type

/-
But the name silly_a isn't; you have to use silly_type.silly_a
to refer to it. Uncomment the first line that follows to confirm
that you get an error (hover over the red line to see the error
details), then confirm that the second #check is good.
-/

-- #check silly_a
#check silly_type.silly_a



-- OPENING NAMESPACES

/-
It's inconvenient to always have to type namespace names to refer
to definitions inside of namespaces. To address this issue, Lean,
and many other languages, allow you to "open" a namespace, after
which you can refer directly to names defined within it.
-/

open silly_type
#check silly_a -- yeah!

/-
In the first part of this class, we're going to define our own
versions of some of the fundamental types already built into Lean
(via libraries that it imports automatically). Those types are
defined in the global, or "root", namespace of Lean. To avoid
having our definitions conflict with those in the root namespace
We enclose all of our own definitions within a namespace called 
"csdm", short for "computer science discrete math." 
-/


/-
One must be quite careful when defining names that are already 
defined in other namespaces that you might be using. To give a
sense of the issue, stop to address the following exercise.
-/

/-
EXERCISE: In the current environment (the association between
names and their meanings) what is the meaning of the identifier,
bool? Is it the version of bool from the root namespace or is 
it our bool from the csdm namespace? 

EXERCISE: What about tt? Does its definition in the current
environment come from from the bool type in the root namespace 
or from our bool type's namespace?
-/

/-
Answering these question requires some non-trivial reasoning. 
Luckily, you can use Lean #check commands to test your answers.
-/

/-
First, in the current environment (at this point in the code),
the identifier, bool, refers to our version of bool. We defined
the name in the current namespace, so our definition prevails.
If you want to refer to the version of bool in the root namespace,
you have to use _root_.bool
-/

#check xbool
#check _root_.bool

/-
The situation with tt is more complex. The key to understanding
the answer is to remember that the namespaces of types are closed
by default. So even though we've defined our own version of bool
in the current environment, its namespace, within which the names 
of its constructors are defined, is still closed. Therefore we
can't just use tt and ff to refer to those constructors.

On the other hand, the names, tt and ff, from the by-default 
opened namespace of the bool type in the root namespace to be
visible into the current namespace. So at this point, tt refers 
to _root_.bool.tt. 

If we want to refer to our version of tt, a qualified name has 
to be used. It can be bool.tt or to be completely clear, you 
can use csdm.bool.tt. They mean the same thing. Hover over the
identifiers in the following #check commands to confirm what we 
just said.
-/

#check tt
#check bool.tt
#check csdm.xbool.tt

/-
To summarize, in this environment, bool refers to csdm.bool, 
bool.tt thus refers to csdm.bool.tt, which we call the "fully 
qualified" name of this constructor. But tt refers to the tt 
constructor defined by the built-in version of the bool type.
-/

-- AMBIGUOUS DEFINITIONS

/-
Now the astute reader might suggest that all we have to do 
is to open the csdm.bool namespace. That's actually a good
idea, but there's a complication: we end up with two definitions
of the same identifier in the same current environment! The
first is the definition visible in the _root_ namespace, and
the second is the one from our own bool type definition. 
Here's the command to open csdm.bool.
-/

open csdm.bool 

/-
The problem is that two different definitions of tt are now
visible in the current environment. That is, the definition of
the identifier is ambiguous. 

Uncomment the following line by deleting the two underscores
at the beginning of the and hover over the red line to see the 
error  message. It says that the definition of tt is ambiguous
in the current environment. 
-/

--#check tt --ambiguous!

/-
To refer to our own definition of tt, you thus once again have 
to use a qualified name. Either of the following forms will do.
-/

#check bool.tt -- this now refers to *our* version of tt
#check csdm.bool.tt -- so does this!

/-
Moreover, you can no longer refer to the definition of tt from
the root environment just by writing tt: tt is ambiguous now.
To refer either to the bool type or to one of its constructors 
from the root namespace, you now have to do so using the special 
namespace designator. At a technical level, _root_ is not itself
a namespace, but it tells Lean that that's the namespace in which
to look for a definition of the following name.
-/

#check _root_.bool -- the _root_ tells lean to use the built-in version
#check _root_.bool.tt

/-
For the reader who wants the full picture, there's one final,
and admittedly confusing point. Even though in the current environment,
bool refers to our definition of bool, in the context of an open command,
that is not so. Rather, "bool" refers to the built-in version. This is
arguably a design flaw in Lean. The following command thus opens the 
namespace of the bool type in the root environment; but it's already 
open so the command has no further effect!
-/

open bool

/-
The takeaway is that when you use an open command, you should use a 
qualified name, as we did above when we opened cs2012.bool (not just
bool). 
-/

-
The interested reader may (but is not expected to) refer to the
Lean reference manual for additional information on namespaces.
https://leanprover.github.io/reference/other_commands.html#namespaces
-/



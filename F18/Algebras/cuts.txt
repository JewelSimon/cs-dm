There are two different ways to be precise about what this
means. The first is as a function from *pairs* (2-tuples) of 
boolean argument values to boolean results. Adding parenthesis 
makes this clear.

{ ((T, T), T), ((T, F), F), ((F, T), F), ((F, F), F) }

The type of this function is (boolean, boolean) -> boolean.

The second possibility is that we have a function from boolean 
values to pairs of boolean values. Here's the set of tuples for
this function.

{ (T, (T, T)), (T, (F, F)), (F, (T, F)), (F, (F, F)) }

The type of this function is boolean -> 


====

/-
It is important when reading and writing mathemtical logic (and code)
to be very clear about the types of the values that are being discussed or
manipulated. We already have strong intutions for many important types. They
include the booleans, the natural numbers (the non-negative integers), the
integers, the rationals, the reals, complex numbers, and also more complex
types such as lists of values of some underlying type, e.g., list of natural
number, list of boolean, list of rational, etc.

Now we are at a point where it often pays to be much more precise about 
types and values. To this end, we introduce the concept of inductive type
definitions. An inductive type definition precisely defines a set of values
(all and the only values of the type) by giving a list of "constructors", or
ways of building values of the given type. The simplest kind of constructor
is just a "constant" -- simply the name of a value of the type in question.

In this chapter, we make this idea precise, and then build on it, by giving
an inductive definition of the type of boolean values. From you earlier work
in computer science, you already know that there are just two values of this
type, in English usually called true and false, sometimes written as 1 and 0, 
respectively, and that in this chapter we will write as T and F.

Here then is an inductive definition (in the syntax of Lean language) of a
type, that we will call "boolean", that specifies T and F as the elements
of the set of values of this type. We specify two constructors: one called 
T, a value that will henceforth be taken to be of type boolean, and one 
called F, now taken to be of type boolean. The notation "T: boolean" is what
we call a type judgment, and it asserts that T is a value of type boolean.

The set of values of type boolean thus includes T and F, and it is in the
nature of inductive definitions that the *only* values of a given type are
those that can be constructed using the available constructors. The set of
values specified by the following inductive type definition is thus {T, F}.

We have written this set using "display notation", where we list the
elements of the set separated by commas and enclosed within curly braces. 
-/

/-
The observant reader will see another type judgment in this expression:
we are specifying boolean to be a value of type, "Type". "Type" is the
type of values that are themselves types in Lean!
-/

